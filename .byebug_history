exit
@invalid_primary_entry
c
@invalid_entries
exit
@invalid_entries
exit
@invalid_entries
exit
csv[10]
csv[9]
csv[8]
csv[7]
csv[6]
exit
csv[5]
csv[4]
csv[3]
csv[2]
exit
csv2[1]
csv2[0]
csv2.each {|row| p row}
csv2 = CSV.open("test/csvs/test_out.csv").read
csv2
csv2.each {|row| p row}
csv2 = CSV.open("test/csvs/test_out.csv").read.size
csv2 = CSV.open("test/csvs/test_out.csv").read.class
csv2 = CSV.open("test/csvs/test_out.csv").read
csv.class
csv
IO.readlines(csv)
IO.readlines(csv)[3]
exit
csv.first
csv.last
csv[2]
csv.first
csv[1]
csv.[1]
csv.first
csv = CSV.open("fixtures/csvs/test_out_fixture.csv")
csv.each {|row| p row}
csv.first
csv[0]
csv.each {|row| p row}
csv.each do {|row| p row}
csv.class
csv = CSV.open("fixtures/csvs/test_out_fixture.csv")
CSV.open("fixtures/csvs/test_out_fixture.csv")
File.open("fixtures/csvs/test_out_fixture.csv") == File.open("test/csvs/test_out.csv")
File.open("fixtures/csvs/test_out_fixture.csv")
File.open("fixtures/csvs/test_out_fixturea.csv")
File.open("fixtures/csvs/test_out_fixture.csv")
File.open("test/csvs/test_out.csv")
File.open("csvs/test_out.csv")
File.open(csvs/test_out.csv)
@word_medley_primary_entry.class
@word_medley_primary_entry
pwd
exit
@word_medley_primary_entry
exit
@heteronym_merged_entries[1][:audio]
@heteronym_merged_entries[0][:audio]
@heteronym_merged_entries.size
heteronym_merged_entries.size
exit
@non_heteronym_merged_entries[1][:audio]
@non_heteronym_merged_entries[0][:audio]
@non_heteronym_merged_entries.size
exit
@thesaurus_plus_lookup.primary_entry
@thesaurus_plus_lookup
exit
@non_heteronym_merged_entries.size
@non_heteronym_merged_entries.first
@non_heteronym_merged_entries
c
@heteronym_merged_entries
exit
MerriamWebsterPlus::EntryAudioMerger.new(dst_entries: heteronym_dst_entries,
																	   			src_entries: heteronym_src_entries).
																									merged_entries
exit
MerriamWebsterPlus::EntryAudioMerger.new(dst_entries: non_heteronym_dst_entries,
																	   		  src_entries: non_heteronym_src_entries).
																									merged_entries
MerriamWebsterPlus::EntryAudioMerger.new(dst_entries: non_heteronym_dst_entries,
																	   		  src_entries: non_heteronym_src_entries).
																									merged_entries
		end
MerriamWebsterPlus::DictionaryEntries.new(word: "beach").main_entries
MerriamWebsterPlus::ThesaurusEntries.new(word: "beach").main_entries
exit
MerriamWebsterPlus::DictionaryEntries.new(word: "beach").main_entries
MerriamWebsterPlus::ThesaurusEntries.new(word: "beach").main_entries
MerriamWebsterPlus::ThesaurusEntries.new(word: "lake").main_entries
MerriamWebsterPlus::ThesaurusEntries.new(word: "summery").main_entries
MerriamWebsterPlus::DictionaryEntries.new(word: "summery").main_entries
MerriamWebsterPlus::DictionaryEntries.new(word: "summer").main_entries
MerriamWebsterPlus::ThesaurusEntries.new(word: "summer").main_entries
MerriamWebsterPlus::DictionaryEntries.new(word: "affect").main_entries
MerriamWebsterPlus::ThesaurusEntries.new(word: "affect").main_entries
exit
@heteronym_merged_entries.last[:audio]
@heteronym_merged_entries.first[:audio]
@heteronym_dst_entries.last
@heteronym_dst_entries.first
exit
@heteronym_entries.last[:audio]
@heteronym_entries[1][:audio]
@heteronym_entries.first[:audio]
@heteronym_entries.first
@heteronym_entries.size
@heteronym_entries.szie
@heteronym_entries
c
exit
@valid_primary_entry
puts JSON.pretty_generate(@valid_primary_entry) == @valid_primary_entry
puts JSON.pretty_generate(@valid_primary_entry)
@valid_primary_entry
@valid_entry
@valid_entries
c
exit
@valid_entries
exit
 @valid_primary_sense[:antonyms_and_near_antonyms]
 @valid_primary_sense[:antonyms]
 @valid_primary_sense[:near_antonyms]
 @valid_primary_sense[:synonymous_phrases]
 @valid_primary_sense[:related_words]
 @valid_primary_sense[:synonyms_and_near_synonyms]
 @valid_primary_sense[:synonyms]
 @valid_primary_sense[:definition]
exit
@valid_primary_sense[:example]
c
exit
sense_group
short_definition
exit
@valid_main_entry[:senses].first
@valid_main_entry[:senses]
exit
@valid_main_entry[:senses]
c
continuec
continue
c
continue
sense_sequence.size
sense_sequence
short_definition
continue
short_definition
exit
short_definition
sense_sequence.first
sense_sequence.first.size
sense_sequence.size
sense_sequence.szie
sense_sequence
exit
sense_sequence.each { |sense| puts sense.to_yaml }
sense_sequence.size
continue
sense_sequence.each { |sense| puts sense.to_yaml }
short_definition
sense_sequence.first[0]
sense_sequence.first[1]
sense_sequence.first
sense_sequence.first.first
sense_sequence.first
sense_sequence.first.first
sense_sequence.first.first.first
sense_sequence.first.first
sense_sequence.first
sense_sequence.first.size
sense_sequence.first
sense_sequence
exit
sense_sequence
sense_sequence.size
continue
sense_sequence.size
continue
sense_sequence.size
continue
sense_sequence.size
sense_sequence
sense_sequence.size
sense_sequence.each_with_index
continue
sense_sequence
sense_sequence[1]
sense_sequence.first
sense_sequence
exit
senses
sense_group
next
short_definition
sense_sequence.each { |sense| puts sense.to_yaml }
sense_sequence.each { |sense| p sense }
sense_sequence
exit
select_verbal_illustration_section(defining_text_snote_section)
defining_text_snote_section = defining_text_section&.select {|section| section[0]=="snote" }&.dig(0,1)
defining_text_snote_section = defining_text_section&.select {|section| section[0]=="snote" }&.dig(0)
defining_text_snote_section = defining_text_section&.select {|section| section[0]=="snote" }&.dig(0,1)
defining_text_snote_section = defining_text_section&.select {|section| section[0]=="snote" }&.dig(0,1,0)
defining_text_section&.select {|section| section[0]=="snote" }&.dig(0,1,0)
puts defining_text_section.to_yaml
defining_text_section
select_verbal_illustration_section(defining_text_section_usage_notes)
select_verbal_illustration_section(defining_text_section)
c
select_verbal_illustration_section(defining_text_section_usage_notes)
select_verbal_illustration_section(defining_text_section)
exit
defining_text_section&.select {|section| section[0]=="vis" }&.last ||
				defining_text_section_usage_notes&.select {|section| section[0]=="vis" }&.last
defining_text_section&.select {|section| section[0]=="vis" }&.last
defining_text_section_usage_notesdefining_text_section&.select {|section| section[0]=="vis" }&.last
defining_text_section_usage_notes&.dig(1, 0, :t)&.gsub(/\{.*?\}/,'')&.strip
verbal_illustration_section&.dig(1, 0, :t)&.gsub(/\{.*?\}/,'')&.strip ||
				defining_text_section_usage_notes&.dig(1, 0, :t)&.gsub(/\{.*?\}/,'')&.strip
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1,0)
defining_text_section&.select {|section| section[0]=="vis" }&.last
verbal_illustration_section
vis&.dig(1, 0, :t)&.gsub(/\{.*?\}/,'')&.strip
vis = defining_text_section_usage_notes&.select {|section| section[0]=="vis" }&.last
defining_text_section_usage_notes&.select {|section| section[0]=="vis" }&.last
defining_text_section
defining_text_section_usage_notes
defining_text_section_usage_notes&.select {|section| section[0]=="vis" }&.last
defining_text_section_usage_notes = defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1,0)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1,0)
v
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1,0,)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1,0,0)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1,0)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,1)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,0)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0)
defining_text_section&.select {|section| section[0]=="uns" }
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,0,0)
defining_text_section&.select {|section| section[0]=="uns" }&.dig(0,0,0).size
defining_text_section&.select {|section| section[0]=="uns" }&.last&.last&.last.size
defining_text_section&.select {|section| section[0]=="uns" }&.last&.last&.last
defining_text_section&.select {|section| section[0]=="uns" }&.last&.last.size
defining_text_section&.select {|section| section[0]=="uns" }&.last&.last
defining_text_section&.select {|section| section[0]=="uns" }&.last.size
